#!/usr/bin/python
import sys
import pandas as pd
import re

RANGE = 100 #change the range as you want


#This script takes two arguments virus_TP_full_data.csv that has the full data and the csv file for long disorder generated by extract_disorder_scores.py 
#The output is 2 CSV files one for the disorder of residues before and another for the residues after the motif instance based on the range specified at the begining of the file

ELM_motifs= sys.argv[1]
disorder_data=sys.argv[2]

with open (ELM_motifs, 'r') as ELM_motifs, open(disorder_data, 'r') as disorder_data:
    
    ELM_motifs=pd.read_csv(ELM_motifs).values.tolist()
    disorder_data=pd.read_csv(disorder_data,header=None, sep='\r', lineterminator='\n').iloc[:,0].str.split(',').values.tolist() 
    #disorder_data=disorder_data.explode()
    #print(ELM_motifs)
    #print(disorder_data)
    

    before_motif=[]
    after_motif=[]

    for data in disorder_data:
        protein_id= data[0].split('|')[1]
        protein_range=data[0].split('|')[3]
        adjusted_start=protein_range.split('_')[0]
        adjusted_end=protein_range.split('_')[1]
        data_lst=data[1:]
        #print(data_lst)
        #print(len(data_lst))
        for elm in ELM_motifs:
            elm_accession=elm[0]
            elm_type=elm[1]
            elm_identifier=elm[2]
            elm_protein_name=elm[3]
            elm_protein_id= elm[4]
            elm_mean=elm[-1]
            orig_start= int(elm[6])
            #print(orig_start)
            orig_end=int(elm[7])
            #print(data)
            if int(adjusted_start) == 1:# protein_id == elm_protein_id and orig_start in list(range(int(adjusted_start),int(adjusted_end))):
                #print(adjusted_start)
                #print(protein_id)
   
                if protein_id == elm_protein_id and orig_start in list(range(int(adjusted_start),int(adjusted_end))):
                    #if :

                        #get the length of the instance
                        elm_len = orig_end - orig_start
                        #if the start of instance - the range is less than zero then the instance starts before site 401
                        if orig_start - RANGE <= 0:
                            #print(adjusted_start)
                            #print(orig_start)
                            #print(adjusted_end)
                            #print(orig_end)
                            diso_data = data_lst[0:orig_start-1]
                            #print(orig_start)
                            #print(diso_data)
                            #print(len(diso_data))
        
                            remaining_data_num=RANGE-len(diso_data)
                            remaining_data=['nan'] * remaining_data_num
                            #remaining_data=['nan' for x in remaining_data if x == None]
                            #print(remaining_data_num)
                            #print(remaining_data)
                            diso_data_upto_RANGE= remaining_data+diso_data
                            #print(diso_data_upto_RANGE)
                            #print(len(diso_data_upto_RANGE))
                            before_motif.append([elm_accession, elm_type, elm_identifier, elm_protein_name, elm_protein_id, orig_start, orig_end, elm_mean, diso_data_upto_RANGE])
                           
                        else:
                            diso_data=data_lst[orig_start-(RANGE+1):(orig_start-1)]
                            #print(orig_start)
                            #print(len(diso_data))
                            #print(diso_data)
                            before_motif.append([elm_accession, elm_type, elm_identifier, elm_protein_name, elm_protein_id, orig_start, orig_end, elm_mean, diso_data])
                            
                        if len(data_lst) - orig_end - RANGE <= 0:
                            
                            diso_data= data_lst[orig_end:len(data_lst)+1]
                            #print(diso_data)
                            #print(orig_end)
                            #print(len(diso_data))
                            #print(elm_accession)
                            remaining_data_num=RANGE-len(diso_data)
                            remaining_data= ['nan'] * remaining_data_num
                            #remaining_data=['nan' for x in remaining_data if x == None] #replace(to_replace=None, value='nan')
                            #print(remaining_data_num)
                            #print(remaining_data)
                            diso_data_upto_RANGE= diso_data + remaining_data
                            #print(diso_data_upto_RANGE)
                            #print(len(diso_data_upto_RANGE))
                            after_motif.append([elm_accession, elm_type, elm_identifier, elm_protein_name, elm_protein_id, orig_start, orig_end, elm_mean, diso_data_upto_RANGE])
                        else:
                            
                            diso_data_after=data_lst[orig_end:orig_end+RANGE]
                            after_motif.append([elm_accession, elm_type, elm_identifier, elm_protein_name, elm_protein_id, orig_start, orig_end, elm_mean, diso_data_after])
                            #print(diso_data_after)
                            #print(orig_end)
                            #print(len(diso_data_after))
                      #print(elm_accession)
            else:
                # if the sequence doesn't start at position 1 in the protein
                if protein_id == elm_protein_id and orig_start in list(range(int(adjusted_start),int(adjusted_end))):
                #get the length of the instance
                    elm_len = orig_end - orig_start
                    #print(protein_id)
                    #print(adjusted_start)
                    #print(adjusted_end)
                    #adjust the start and end of the SLiM
                    elm_seq_start= orig_start - int(adjusted_start)+1

                    elm_seq_end= orig_end -int(adjusted_start)+1
                    #if the start of instance - the range is less than zero then the instance starts before site 401
                    if elm_seq_start - RANGE <= 0:
    
                        diso_data = data_lst[0:elm_seq_start-1]
                        #print(protein_id)
                        #print(orig_start)
                        #print(elm_seq_start)
                        #print(diso_data)
                        #print(len(diso_data))
    
                        remaining_data_num=RANGE-len(diso_data)
                        remaining_data=['nan'] * remaining_data_num
                        #remaining_data=['nan' for x in remaining_data if x == None]
                        #print(remaining_data_num)
                        #print(remaining_data)
                        diso_data_upto_RANGE= remaining_data+diso_data
                        #print(diso_data_upto_RANGE)
                        #print(len(diso_data_upto_RANGE))
                        before_motif.append([elm_accession, elm_type, elm_identifier, elm_protein_name, elm_protein_id, orig_start, orig_end, elm_mean, diso_data_upto_RANGE])
                       
                    else:
                        diso_data=data_lst[elm_seq_start-(RANGE+1):(elm_seq_start-1)]
                        #print(elm_seq_start)
                        #print(len(diso_data))
                        #print(diso_data)
                        before_motif.append([elm_accession, elm_type, elm_identifier, elm_protein_name, elm_protein_id, orig_start, orig_end, elm_mean, diso_data])
                        
                    if len(data_lst) - elm_seq_end - RANGE <= 0:
                        #print(protein_id)
                        #print(adjusted_start)
                        #print(adjusted_end)
                        diso_data= data_lst[elm_seq_end:len(data_lst)+1]
                        #print(diso_data)
                        #print(elm_seq_end)
                        #print(len(diso_data))
                       # print(elm_accession)
                        remaining_data_num=RANGE-len(diso_data)
                        remaining_data= ['nan'] * remaining_data_num
                        #remaining_data=['nan' for x in remaining_data if x == None]
                        #print(remaining_data_num)
                        #print(remaining_data)
                        diso_data_upto_RANGE= diso_data + remaining_data
                        #print(diso_data_upto_RANGE)
                        #print(len(diso_data_upto_RANGE))
                        after_motif.append([elm_accession, elm_type, elm_identifier, elm_protein_name, elm_protein_id, orig_start, orig_end, elm_mean, diso_data_upto_RANGE])
                    else:
                        
                        diso_data_after=data_lst[elm_seq_end:elm_seq_end+RANGE]
                        after_motif.append([elm_accession, elm_type, elm_identifier, elm_protein_name, elm_protein_id, orig_start, orig_end, elm_mean, diso_data_after])
                        #print(diso_data_after)
                        #print(orig_end)
                        #print(len(diso_data_after))
                        #print(elm_accession)
           
    #print(before_motif)
    #print(len(before_motif))  
    before_motif=pd.DataFrame(before_motif)
    before_motif.columns= ['elm_accession', 'elm_type', 'elm_identifier', 'elm_protein_name', 'elm_protein_id', 'orig_start', 'orig_end', 'elm_mean', 'diso_data_before']
    before_motif.to_csv(str(sys.argv[1]).split('_')[0]+'_long_disorder_before_motif_data_'+str(RANGE)+'.csv', encoding='utf-8', index=False, header= True)
    #print(after_motif)
    #print(len(after_motif))  
    after_motif=pd.DataFrame(after_motif)
    after_motif.columns= ['elm_accession', 'elm_type', 'elm_identifier', 'elm_protein_name', 'elm_protein_id', 'orig_start', 'orig_end', 'elm_mean', 'diso_data_after']
    after_motif.to_csv(str(sys.argv[1]).split('_')[0]+'_long_disorder_after_motif_data_'+str(RANGE)+'.csv', encoding='utf-8', index=False, header= True)
                
                
                
                
                
                
        
                

    